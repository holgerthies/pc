import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy,random


def shortest_path(dist):
	N = len(dist)
	for k in range(N):
		for i in range(N):
			for j in range(N):
				if dist[i][k]+dist[k][j] < dist[i][j]:
					dist[i][j] = dist[i][k]+dist[k][j]
	return dist
ap = dict()
def all_paths(dist, i,j, d):
	if (i,j) in ap:
		return ap[(i,j)]
	if i==j:
		return [[]]
	N = len(dist)
	ans = []
	for k in range(N):
		if k==i: continue
		if dist[i][k]+d[k][j] == d[i][j]:
			x = all_paths(dist, k,j,d)
			if x != None:
				for p in x:
					ans.append([(i,k)]+p)
	ap[(i,j)] = ans
	return ans


class BuildingRoutes:
    def build(self, dist, T):
        N = len(dist)
        d = [[0 for _ in range(N)] for _ in range(N)]
        ap = dict()
        for i in range(N):
        	for j in range(N):
        		d[i][j] = int(dist[i][j])
        sp = shortest_path(copy.deepcopy(d))
        count = [[0 for _ in range(N)] for _ in range(N)]
        for i in range(N):
        	for j in range(N):
        		used = set()
        		for p in all_paths(d, i,j, sp):
        			for x,y in p:
        				if (x,y) not in used:
        					count[x][y] += 1
        					used.add((x,y))

        ans = 0
        for i in range(N):
        	for j in range(N):
        		if count[i][j] >= T:
        			ans += d[i][j]
        return ans


# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str("\"") + str(p0[i]) + str("\""))
	
	sys.stdout.write(str("}") + str(",") + str(p1))
	print(str("]"))
	obj = BuildingRoutes()
	startTime = time.clock()
	answer = obj.build(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p2))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = ("011","101","110")
p1 = 1
p2 = 6
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = ("033","309","390")
p1 = 1
p2 = 12
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = ("0123","1023","1203","1230")
p1 = 2
p2 = 5
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = ("05789654","10347583","65085479","55602398","76590934","57939045","12345608","68647640")
p1 = 3
p2 = 40
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------
# ----- test 4 -----
disabled = False
p
p1 = 600
p2 = 0
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------
if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
