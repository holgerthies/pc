import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class CatsOnTheLineDiv2:
    def getAnswer(self, position, count, time):
        
        return

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}") + str(",") + str(p2))
	print(str("]"))
	obj = CatsOnTheLineDiv2()
	startTime = time.clock()
	answer = obj.getAnswer(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p3) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (0,)
p1 = (7,)
p2 = 3
p3 = "Possible"
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (0,)
p1 = (8,)
p2 = 2
p3 = "Impossible"
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (0,1)
p1 = (3,1)
p2 = 0
p3 = "Impossible"
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (5,0,2)
p1 = (2,3,5)
p2 = 2
p3 = "Impossible"
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = (5,1,-10,7,12,2,10,20)
p1 = (3,4,2,7,1,4,3,4)
p2 = 6
p3 = "Possible"
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# There are some cats sitting on a straight line that goes from the left to the right.
# You are given two tuple (integer)s position and count.
# For each valid i, there are count[i] cats initially sitting at the point position[i].
# 
# 
# 
# 
# During each minute, each cat chooses and performs one of three possible actions: it may stay in its place, move one unit to the left (i.e., from x to x-1), or move one unit to the right (i.e., from x to x+1).
# (Note that there are no restrictions. In particular, different cats that are currently at the same point may make different choices.)
# 
# 
# 
# 
# You are also given an integer time.
# The goal is to rearrange the cats in such a way that each point contains at most one cat.
# Return "Possible" if it's possible to achive the goal in time minutes, and "Impossible" otherwise (quotes for clarity).
# 
# 
# DEFINITION
# Class:CatsOnTheLineDiv2
# Method:getAnswer
# Parameters:tuple (integer), tuple (integer), integer
# Returns:string
# Method signature:def getAnswer(self, position, count, time):
# 
# 
# CONSTRAINTS
# -position will contain between 1 and 50 elements, inclusive.
# -position and count will contain the same number of elements.
# -Each element of position will be between -1000 and 1000, inclusive.
# -All elements of position will be distinct.
# -Each element of count will be between 1 and 1000, inclusive.
# -time will be between 0 and 1000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {0}
# {7}
# 3
# 
# Returns: "Possible"
# 
# There are 7 cats sitting at the origin in this case. There are also 7 different points that cats can reach in 3 minutes, so each cat can occupy a unique point. Thus, the answer is "Possible".
# 
# 1)
# {0}
# {8}
# 2
# 
# Returns: "Impossible"
# 
# Unlike the first test case, in this case there are 8 cats for 7 available points. Thus, the answer is "Impossible".
# 
# 2)
# {0, 1}
# {3, 1}
# 0
# 
# Returns: "Impossible"
# 
# 
# 
# 3)
# {5, 0, 2}
# {2, 3, 5}
# 2
# 
# Returns: "Impossible"
# 
# 
# 
# 4)
# {5, 1, -10, 7, 12, 2, 10, 20}
# {3, 4, 2, 7, 1, 4, 3, 4}
# 6
# 
# Returns: "Possible"
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
