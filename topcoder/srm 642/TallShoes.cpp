#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
using vii = vector<vector<int>>;
using ll = long long;
#define INF 1000000000

bool check(const vii& G, const ll B, const long long val){
	int s=0, t=G.size()-1;
	int n=G.size();
	vector<vector<long long>> dist(n, vector<long long>(n, B+1));
	for(int i=0; i<n;i++){
		for(int j=0; j<n; j++){
			if(G[i][j] != INF){
				if(G[i][j] < val)
					dist[i][j] = (ll)(val-G[i][j])*(ll)(val-G[i][j]);
				else
					dist[i][j] = 0;
			}
		}
	}
	
	for(int k=0; k<n;k++){
		for(int i=0; i<n;i++){
			for(int j=0; j<n;j++){
				if(dist[i][k] != B+1 && dist[k][i] != B+1)
					dist[i][j] = min(dist[i][j], dist[i][k]+dist[k][j]);
			}
		}
	}
	return dist[s][t] <= B;
}

int bin_search(const vii& G, const ll B, const int left, const int right){
	if(right -left <= 1)
		return left;
	int middle = (left+right)/2;
	if(check(G, B, middle)){
		return bin_search(G, B, middle, right);
	}
	else{
		return bin_search(G, B, left, middle);
	}
}


class TallShoes {
public:
	int maxHeight(int N, vector <int> X, vector <int> Y, vector <int> height, long long B) {
		vector<vector<int>> adj(N, vector<int>(N, INF));
		for(int i=0; i<X.size();i++){
			adj[X[i]][Y[i]] = height[i];
			adj[Y[i]][X[i]] = height[i];
		}

		int ans = bin_search(adj, B, 0, INF);
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, vector <int> p3, long long p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << p4;
	cout << "]" << endl;
	TallShoes *obj;
	int answer;
	obj = new TallShoes();
	clock_t startTime = clock();
	answer = obj->maxHeight(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	long long p4;
	int p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = {0,1,0};
	p2 = {1,2,2};
	p3 = {3,4,2};
	p4 = 1ll;
	p5 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 3;
	p1 = {0,1,0};
	p2 = {1,2,2};
	p3 = {3,4,2};
	p4 = 52ll;
	p5 = 9;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 8;
	p1 = {0,0,3,3,4,4,4,7,7};
	p2 = {1,2,1,2,3,5,6,5,6};
	p3 = {1000,1000,1000,1000,1,1000,1000,1000,1000};
	p4 = 3ll;
	p5 = 2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 10;
	p1 = {0,1,2,3,4,5,6,7,8};
	p2 = {1,2,3,4,5,6,7,8,9};
	p3 = {0,0,0,0,0,0,0,0,0};
	p4 = 9876543210123ll;
	p5 = 1047565;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 6;
	p1 = {0,0,0,0,0,1,1,1,1,2,2,2,3,3,4};
	p2 = {1,2,3,4,5,2,3,4,5,3,4,5,4,5,5};
	p3 = {999999,986588,976757,988569,977678,999999,967675,947856,955856,999999,975956,956687,999999,979687,999999};
	p4 = 0ll;
	p5 = 999999;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 24;
	p1 = {6, 15, 3, 14, 19, 13, 3, 23, 23, 9, 9, 0, 20, 0, 2, 1, 4, 16, 18, 17, 14, 18, 3, 23, 15, 18, 5, 3, 9, 21, 11, 12, 22, 8, 0, 9, 12, 21, 1, 6, 20, 8, 14, 20, 5, 1, 15, 6, 12, 1, 3, 23, 9, 11, 10, 1, 21, 4, 17, 9, 5, 10, 9, 9, 11, 10, 2, 11, 2, 4, 16, 19, 3, 11, 16, 17, 1, 23, 14, 13, 15, 8, 9, 16, 16, 1, 14, 11, 6, 14, 16, 17, 23, 20, 23, 2, 0, 18, 22, 8, 18, 0, 22, 14, 20, 12, 11, 17, 1, 21, 22, 5, 3, 21, 4, 18, 17, 15, 2, 11, 10, 15, 22, 16, 5, 23, 20, 4, 8, 19, 8, 10, 3, 10, 7, 6, 23, 3, 14, 8, 3, 1, 23, 14, 4, 1, 7, 16, 19, 19, 23, 10, 13, 1, 5, 6, 4, 21, 13, 0, 13, 12, 7, 19, 11, 8, 3, 16, 8, 16, 15, 9, 18, 20, 12, 8, 18, 12, 19, 16, 23, 16, 7, 4, 22, 16, 11, 18, 9, 7, 22, 0, 11, 20, 3, 13, 23, 13, 20, 1, 12, 17, 7, 10, 0, 21, 12, 21, 2, 6, 4, 19, 14, 21, 3, 21, 3, 1, 15, 3, 3, 22, 12, 6, 6, 20, 6, 20, 15, 14, 13, 22, 1, 13, 22, 11, 2, 23, 3, 23, 2, 21, 4, 3, 4, 20, 19, 17, 23, 13, 13, 22, 8, 0, 9, 13, 5, 0, 15, 15, 5, 8, 15};
	p2 = {13, 6, 2, 10, 21, 8, 6, 13, 7, 15, 7, 2, 15, 18, 10, 9, 16, 23, 17, 7, 12, 5, 19, 10, 0, 12, 23, 21, 21, 10, 9, 20, 9, 22, 4, 6, 4, 20, 3, 5, 10, 5, 16, 11, 0, 17, 13, 2, 17, 18, 18, 1, 12, 10, 19, 13, 0, 14, 15, 2, 22, 18, 3, 14, 0, 13, 16, 4, 5, 1, 7, 2, 15, 2, 0, 5, 14, 19, 11, 3, 16, 17, 13, 3, 9, 5, 0, 22, 4, 13, 18, 22, 20, 22, 11, 8, 12, 19, 6, 7, 13, 19, 14, 21, 6, 6, 19, 6, 8, 12, 15, 16, 20, 6, 17, 9, 19, 7, 14, 15, 15, 8, 4, 22, 15, 21, 8, 10, 18, 13, 10, 7, 10, 5, 22, 14, 22, 7, 15, 19, 23, 22, 0, 7, 23, 0, 13, 17, 20, 6, 17, 16, 11, 19, 13, 23, 21, 18, 2, 20, 22, 2, 5, 14, 7, 12, 11, 19, 21, 1, 21, 4, 14, 16, 11, 14, 15, 22, 7, 8, 8, 11, 1, 19, 18, 12, 1, 20, 10, 21, 21, 17, 21, 7, 8, 16, 18, 20, 5, 6, 7, 9, 4, 17, 7, 5, 10, 2, 17, 18, 2, 5, 17, 16, 0, 1, 4, 2, 1, 22, 17, 10, 5, 16, 10, 14, 0, 17, 23, 5, 12, 0, 10, 17, 2, 5, 18, 12, 14, 9, 20, 17, 8, 12, 18, 1, 9, 11, 14, 21, 0, 19, 9, 10, 20, 4, 9, 9, 19, 4, 4, 0, 12};
	p3 = {563530, 86671, 28930, 223424, 444482, 71979, 944061, 18162, 630478, 559143, 140595, 675007, 2911, 62, 783948, 374267, 932744, 79728, 264006, 1667, 448387, 1198, 314569, 577273, 13341, 133625, 814910, 41474, 307989, 134274, 981679, 143921, 51053, 981752, 130616, 358099, 613693, 878159, 194011, 123637, 353898, 11783, 678471, 304578, 244797, 202305, 217, 3034, 939623, 119262, 658570, 504593, 1079, 96644, 21148, 35274, 60269, 165708, 39348, 235747, 179498, 439837, 2469, 106580, 357297, 655593, 879358, 387520, 466959, 621184, 211759, 647467, 22473, 693117, 466101, 9291, 481170, 157080, 31593, 551160, 304865, 703441, 222851, 632176, 401412, 332029, 61300, 95391, 5870, 127391, 826256, 483045, 41987, 176710, 655133, 302750, 9095, 324213, 258052, 236909, 19796, 358455, 851093, 133239, 2875, 10093, 18485, 735778, 539137, 158768, 840641, 210275, 91041, 62594, 522718, 791077, 142402, 0, 4897, 128785, 159322, 4580, 447320, 75440, 119595, 88, 438097, 682133, 568067, 825636, 385278, 98742, 102861, 263962, 500568, 55818, 503127, 138082, 300827, 806177, 147103, 34064, 843002, 600837, 198612, 573580, 85561, 860742, 224272, 37113, 479592, 268327, 91724, 199205, 110, 794196, 297885, 918257, 35399, 538141, 155715, 702422, 39474, 290981, 841791, 16, 598943, 980953, 388053, 559374, 45575, 774533, 293819, 185865, 171913, 808351, 209741, 163547, 220061, 882639, 39192, 619673, 621289, 326910, 9195, 196641, 543306, 7, 691521, 120426, 34798, 17349, 736875, 293996, 49947, 82877, 293362, 5484, 250379, 729736, 896971, 346251, 122122, 68489, 891325, 613301, 704883, 594962, 838410, 279800, 169004, 2897, 819817, 74938, 346910, 675846, 224443, 85566, 296209, 457519, 778936, 205479, 904633, 775949, 235556, 185686, 448999, 38, 128139, 518349, 76228, 60122, 75574, 139441, 120549, 542286, 11652, 15547, 532734, 172617, 366039, 192495, 498730, 569632, 85660, 6688, 10303, 61792, 880295, 998350, 796023, 429665, 367193, 419583, 639909, 667997, 717334, 194854, 477922, 116910, 947208, 406744, 116728};
	p4 = 232026919ll;
	p5 = 866325;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// A king of a mystical land likes to wear very tall shoes.
// The tall shoes are sometimes an inconvenience as they make traveling through the kingdom's road network difficult.
// 
// 
// 
// There are N cities in the kingdom.
// The cities are numbered 0 through N-1.
// The road network in the kingdom is connected: it is possible to get from any city to any other city by taking one or more roads.
// Each road in the network is bidirectional and connects two different cities.
// You are given the description of the road network in three vector <int>s: X, Y, and height, each with the same number of elements.
// For each valid i, there is a road that connects cities X[i] and Y[i].
// The value height[i] is the height limit for that road:
// The king can travel along that road if and only if the height of his shoes is height[i] or less.
// 
// 
// 
// The king wants to walk from city 0 to city N-1.
// While doing so, he wants to wear shoes that are as tall as possible.
// Before he goes for the walk, he can increase the height limits for some roads.
// The king has a budget of B dollars for the modifications.
// Increasing the height limit of any road by k costs k^2 dollars.
// The height limit of each road can only be increased at most once.
// 
// 
// 
// You are given the int N, the vector <int>s X, Y and height, and the long long B.
// Compute the maximum height of shoes the king may wear for his walk from city 0 to city N-1 after increasing the height limits appropriately.
// 
// 
// DEFINITION
// Class:TallShoes
// Method:maxHeight
// Parameters:int, vector <int>, vector <int>, vector <int>, long long
// Returns:int
// Method signature:int maxHeight(int N, vector <int> X, vector <int> Y, vector <int> height, long long B)
// 
// 
// CONSTRAINTS
// -N will be between 2 and 50, inclusive.
// -from, to, height will have between N-1 and N*(N-1)/2 elements, inclusive.
// -Each element of X, Y will be between 0 and N-1, inclusive.
// -For all i, X[i] != Y[i].
// -Each undirected edge X[i], Y[i] will appear at most once.
// -Each element of height will be between 0 and 10^6, inclusive. 
// -The graph described by X and Y will be connected. 
// -B will be between 0 and 10^15, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// {0, 1, 0}
// {1, 2, 2}
// {3, 4, 2}
// 1
// 
// Returns: 4
// 
// 
// In this example there are three roads: 0-1 (height limit 3), 1-2 (height limit 4), and 0-2 (height limit 2).
// The king has a budget of 1 dollar.
// The optimal way to use that budget is to increase the height limit for the 0-1 road from 3 to 4.
// After that change, the king can use shoes of height 4 and walk along the path 0-1-2.
// 
// 
// 1)
// 3
// {0, 1, 0}
// {1, 2, 2}
// {3, 4, 2}
// 52
// 
// Returns: 9
// 
// Here we can increase the last road's height by 7 which will allow the king to wear shoes of height 9. Note that the king is not required to spend the entire budget.
// 
// 2)
// 8
// {0, 0, 3, 3, 4, 4, 4, 7, 7}
// {1, 2, 1, 2, 3, 5, 6, 5, 6}
// {1000, 1000, 1000, 1000, 1, 1000, 1000, 1000, 1000}
// 3
// 
// Returns: 2
// 
// 
// 
// 3)
// 10
// {0,1,2,3,4,5,6,7,8}
// {1,2,3,4,5,6,7,8,9}
// {0,0,0,0,0,0,0,0,0}
// 9876543210123
// 
// Returns: 1047565
// 
// 
// 
// 4)
// 6
// {0,0,0,0,0,1,1,1,1,2,2,2,3,3,4}
// {1,2,3,4,5,2,3,4,5,3,4,5,4,5,5}
// {999999,986588,976757,988569,977678,999999,967675,947856,955856,999999,975956,956687,999999,979687,999999}
// 0
// 
// Returns: 999999
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
