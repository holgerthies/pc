import math,string,itertools,fractions,heapq,collections,re,array,bisect,random
from collections import defaultdict


class DisjointSet(object):

	def __init__(self, value):
		self.parent = None
		self.rank = 0
		self.value = value

	def find_parent(self):
		if self.parent == None:
			return self
		self.parent = self.parent.find_parent()
		return self.parent

	def is_same_component(self, other):
		return self.find_parent() == other.find_parent()


def union(x,y):
	xRoot = x.find_parent()
	yRoot =	y.find_parent()
	if xRoot == yRoot:
		return
	if xRoot.rank < yRoot.rank:
		xRoot.parent = yRoot
	if yRoot.rank < xRoot.rank:
		yRoot.parent = xRoot
	if xRoot.rank == yRoot.rank:
		yRoot.parent = xRoot
		xRoot.rank += 1


class ChristmasTreeDecoration:
    def solve(self, col, x, y):
        N = len(col)
        components = {v : DisjointSet(v) for v in range(1,N+1)}
        edges = []
        for i in range(len(x)):
        	if col[x[i]-1] != col[y[i]-1]:
        		edges.append((0, x[i], y[i]))
        		edges.append((0, y[i], x[i]))
        	else:
        		edges.append((1, x[i], y[i]))
        		edges.append((1, y[i], x[i]))
        edges.sort()
        total_weight = 0
        for weight, u,v in edges:
        	cu,cv = components[u], components[v]
        	if not cu.is_same_component(cv):
        		union(cu,cv)
        		total_weight += weight
        return total_weight

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p2)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p2[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = ChristmasTreeDecoration()
	startTime = time.clock()
	answer = obj.solve(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p3))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (1,1,2,2)
p1 = (1,2,3,4)
p2 = (2,3,4,1)
p3 = 1
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (1,1,2,2)
p1 = (1,2,3,4,1,2)
p2 = (2,3,4,1,3,4)
p3 = 0
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (50,50,50,50)
p1 = (1,2,3,1,1,2)
p2 = (2,3,4,4,3,4)
p3 = 3
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (1,4,2,3)
p1 = (1,2,3)
p2 = (2,3,4)
p3 = 0
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = (1,1,1,2,2,2,3,3,3,4,4,4)
p1 = (1,2,3,4,5,6,7,8,9,10,11,12,1,1,1,1,1,1)
p2 = (2,3,1,5,6,4,8,9,7,11,12,10,5,7,12,11,6,4)
p3 = 5
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# Christmas is just around the corner, and Alice just decorated her Christmas tree.
# There are N stars on the tree.
# The stars are numbered 1 through N.
# Additionally, each star has some color.
# You are given the colors of stars as a tuple (integer) col with N elements.
# For each i, col[i] is the color of star i+1.
# (Different integers represent different colors.)
# 
# 
# 
# Alice has prepared N-1 ribbons and she is now going to attach them to the tree.
# Each ribbon will connect two of the stars.
# The ribbons have to be placed in such a way that all stars and ribbons will hold together.
# (In other words, in the resulting arrangement the stars and ribbons will correspond to vertices and edges of a tree.)
# 
# 
# 
# Only some pairs of stars can be connected by a ribbon.
# You are given a list of all such pairs of stars in two tuple (integer)s: x and y.
# For each valid i, it is possible to add a ribbon that connects the stars with numbers x[i] and y[i].
# 
# 
# 
# According to Alice, a ribbon that connects two stars that share the same color is less beautiful than a ribbon that connects two stars with different colors.
# Therefore, she would like to minimize the number of ribbons that connect two same-colored stars.
# Compute and return the smallest possible number of such ribbons.
# 
# 
# DEFINITION
# Class:ChristmasTreeDecoration
# Method:solve
# Parameters:tuple (integer), tuple (integer), tuple (integer)
# Returns:integer
# Method signature:def solve(self, col, x, y):
# 
# 
# CONSTRAINTS
# -N will be between 2 and 50, inclusive.
# -The number of elements in col will be N exactly.
# -The number of elements in x will be between 1 and 200, inclusive.
# -The number of elements in y will be the same as the number of elements in x.
# -All elements of x and y will be between 1 and N, inclusive.
# -For each i, the numbers x[i] and y[i] will be different.
# -All unordered pairs (x[i], y[i]) will be distinct.
# -There will be at least one way to choose N-1 ribbons that form a connected graph.
# 
# 
# EXAMPLES
# 
# 0)
# {1,1,2,2}
# {1,2,3,4}
# {2,3,4,1}
# 
# Returns: 1
# 
# We have four stars. Stars 1 and 2 have the same color, and stars 3 a 4 have the same color.
# There are four pairs of stars we may connect: 1-2, 2-3, 3-4, and 4-1.
# One optimal solution is to use the following ribbons: 2-3, 3-4, and 4-1.
# Two of these are beautiful (2-3 and 4-1) and only one (3-4) is not beautiful.
# 
# 1)
# {1,1,2,2}
# {1,2,3,4,1,2}
# {2,3,4,1,3,4}
# 
# Returns: 0
# 
# Now we can have three beautiful ribbons.
# 
# 2)
# {50,50,50,50}
# {1,2,3,1,1,2}
# {2,3,4,4,3,4}
# 
# Returns: 3
# 
# All stars have the same color. Regardless of how we attach the ribbons, none of them will be beautiful.
# 
# 3)
# {1,4,2,3}
# {1,2,3}
# {2,3,4}
# 
# Returns: 0
# 
# 
# 
# 4)
# {1,1,1,2,2,2,3,3,3,4,4,4}
# {1,2,3,4,5,6,7,8,9,10,11,12,1,1,1,1,1,1}
# {2,3,1,5,6,4,8,9,7,11,12,10,5,7,12,11,6,4}
# 
# Returns: 5
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
