#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


long long fac(long long N, long long left, long long right){
	for(long long p=left; p<=right && p*p <= N;p++){
		if(N % p == 0) return p;
	}
	return N;
}

class TheKingsFactorization {
public:
	vector<long long> getVector(long long N, vector<long long> primes) {
		vector<long long> ans(primes);
		for(auto p : primes){
			N /= p;
		}
		for(int i=0; i<primes.size()-1;i++){
			long long f = fac(N, primes[i], primes[i+1]);
			N /= f;
			if(f > 1)
				ans.push_back(f);
		}
		if(N > 1)
			ans.push_back(N);
		sort(ans.begin(), ans.end());
		return ans;
	}	
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, vector<long long> p1, bool hasAnswer, vector<long long> p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheKingsFactorization *obj;
	vector<long long> answer;
	obj = new TheKingsFactorization();
	clock_t startTime = clock();
	answer = obj->getVector(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	long long p0;
	vector<long long> p1;
	vector<long long> p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 12ll;
	p1 = {2ll,3ll};
	p2 = {2ll,2ll,3ll};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 7ll;
	p1 = {7ll};
	p2 = {7ll};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 1764ll;
	p1 = {2ll,3ll,7ll};
	p2 = {2ll,2ll,3ll,3ll,7ll,7ll};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 49ll;
	p1 = {7ll};
	p2 = {7ll,7ll};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 210ll;
	p1 = {2ll,5ll};
	p2 = {2ll,3ll,5ll,7ll};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 100000ll;
	p1 = {2ll,2ll,2ll,5ll,5ll};
	p2 = {2ll,2ll,2ll,2ll,2ll,5ll,5ll,5ll,5ll,5ll};
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = 200000000000000006ll;
	p1 = {2ll};
	p2 = {2ll,100000000000000003};
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;


	// ----- test 5 -----
	disabled = false;
	p0 = 300000000000001830ll;
	p1 = {2ll, 5ll};
	p2 = {2ll,3ll, 5ll, 10000000000000061ll};
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;

	// ----- test 5 -----
	disabled = false;
	p0 = 9090909090962790ll;
	p1 = {2ll, 5ll, 7ll,13ll};
	p2 = {2ll,3ll, 5ll,7ll,13ll, 3330003330023ll};
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;

	// ----- test 5 -----
	disabled = false;
	p0 = 2001140216613718ll;
	p1 =  {2ll, 100019ll, 100019ll};
	p2 = {2ll, 100019ll,100019ll,100019ll};
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;


	// ------------------	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// The King of Byteland likes integer factorization.
// Your task is to help him factor the number N.
// You will be given the long long N and you should return a vector<long long> containing all prime factors of N sorted in non-decreasing order.
// Note that some primes may occur multiple times in the prime factorization of N.
// For example, for N = 60 the only correct return value is {2, 2, 3, 5} because 2*2*3*5 = 60.
// 
// 
// 
// 
// To make this task easier, the King has decided to give you a hint.
// He already knows the correct factorization and he will tell you every second number in the correct return value.
// More precisely, in addition to N you will be given a vector<long long> primes.
// The number of elements in primes will be (M+1)/2, rounded down, where M is the number of elements in the correct return value.
// For each valid i, primes[i] will be equal to the element 2i of the correct return value.
// (All indices are 0-based.)
// 
// 
// 
// 
// Given N and primes, return the vector<long long> containing the factorization of N.
// 
// 
// DEFINITION
// Class:TheKingsFactorization
// Method:getVector
// Parameters:long long, vector<long long>
// Returns:vector<long long>
// Method signature:vector<long long> getVector(long long N, vector<long long> primes)
// 
// 
// CONSTRAINTS
// -N will be between 2 and 1,000,000,000,000,000,000 (10^18), inclusive.
// -primes will contain the correct prime factors (as defined in the problem statement).
// 
// 
// EXAMPLES
// 
// 0)
// 12
// {2, 3}
// 
// Returns: {2, 2, 3 }
// 
// 
// 
// 1)
// 7
// {7}
// 
// Returns: {7 }
// 
// 
// 
// 2)
// 1764
// {2, 3, 7}
// 
// Returns: {2, 2, 3, 3, 7, 7 }
// 
// 
// 
// 3)
// 49
// {7}
// 
// Returns: {7, 7 }
// 
// 
// 
// 4)
// 210
// {2, 5}
// 
// Returns: {2, 3, 5, 7 }
// 
// 
// 
// 5)
// 100000
// {2, 2, 2, 5, 5}
// 
// Returns: {2, 2, 2, 2, 2, 5, 5, 5, 5, 5 }
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
