#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define REP(k,a) for(int k=0; k < (a); ++k)
#define INF 200000000
#define mp make_pair
#define len(s) (int)((s).size())
#define pb push_back
using namespace std;
typedef long long ll;
typedef unsigned int uint;
using vi = vector<int>;
using vii = vector<vector<int>>;
using pii = pair<int,int>;


vector<pii> nbs(int x, int y){
	vector<pii> ans;
	pii n={x-1,y}, s={x+1,y}, w={x,y-1}, e={x,y+1};
	vector<pii> possible{s,w,e, n};
	for(auto p : possible){
		ans.pb(p);
	}
	return ans;
}

int bfs(int k, vi& bx, vi& by){
	queue<tuple<int,int,int>> q;
	vector<vector<bool>> visited(2001, vector<bool>(2001, false));
	REP(i, len(bx)) visited[bx[i]+1000][by[i]+1000] = true;
	visited[0][0] = true;
	q.push(make_tuple(0,0,0));
	int ans = 0;
	while(!q.empty()){
		int x,y,z;
		tie(x,y,z) = q.front();
		q.pop();
		if(x > ans) ans = x;
		if(z+1 <= k){
			for(auto p : nbs(x,y)){
				if(!visited[p.first+1000][p.second+1000]){
					q.push(make_tuple(p.first, p.second, z+1));
					visited[p.first+1000][p.second+1000] = true;
				}
			}
		}
	}
	return ans;
}

class TheGridDivTwo {
public:
	int find(vector <int> x, vector <int> y, int k) {
		return bfs(k, x,y);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	TheGridDivTwo *obj;
	int answer;
	obj = new TheGridDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,1,1,1};
	p1 = {-2,-1,0,1};
	p2 = 4;
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {-1,0,0,1};
	p1 = {0,-1,1,0};
	p2 = 9;
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {};
	p1 = {};
	p2 = 1000;
	p3 = 1000;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;

	p0 = {-18, 0, 1, -13, -21, -15, -22, -3, -9, -17, -4, -19, -14, -8, -18, -10, -19, -14, -15, -2, -1, -9, -3, -11, -12, -20, -16, -20, -6, -6, -7, -1, -11, -2, -7, -8, -12, -4, -5, 0, -13, -10, -21, -5, -22, -16, -17};
	p1 = {19, -1, 0, 14, -22, -16, -23, 4, -10, 18, 5, -20, 15, -9, -19, -11, 20, -15, 16, 3, 2, 10, -4, 12, 13, 21, -17, -21, 7, -7, -8, -2, -12, -3, 8, 9, -13, -5, -6, 1, -14, 11, 22, 6, 23, 17, -18};
	p2 = 1000;
	p3 = 930;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// John is standing at the origin of an infinite two-dimensional grid.
// He is going to move along this grid.
// During each second he can either stay where he is or he can move by one unit in one of the four cardinal directions (north, south, east, or west).
// Some of the grid points are blocked.
// John is not allowed to move to a blocked grid point.
// 
// 
// You are given the coordinates of the blocked grid points as vector <int>s x and y.
// For each valid i, the grid point that is x[i] units east and y[i] units north of the origin is blocked.
// You are also given an int k.
// Compute and return the maximal possible x-coordinate of a point John can reach in k seconds.
// 
// 
// DEFINITION
// Class:TheGridDivTwo
// Method:find
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int find(vector <int> x, vector <int> y, int k)
// 
// 
// CONSTRAINTS
// -x will contain between 0 and 47 elements, inclusive.
// -x and y will contain the same number of elements.
// -Each element of x will be between -1,000 and 1,000, inclusive.
// -Each element of y will be between -1,000 and 1,000, inclusive.
// -All pairs (x[i], y[i]) will be distinct.
// -Each pair (x[i], y[i]) will be different from (0, 0).
// -k will be between 1 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,1,1,1}
// {-2,-1,0,1}
// 4
// 
// Returns: 2
// 
// The optimal strategy is to move two times north to (0, 2) and then two times east to (2,2).
// 
// 
// 1)
// {-1, 0, 0, 1}
// {0, -1, 1, 0}
// 9
// 
// Returns: 0
// 
// John can not make any moves.
// 
// 2)
// {}
// {}
// 1000
// 
// Returns: 1000
// 
// 
// 
// 3)
// {1,0,0,-1,-1,-2,-2,-3,-3,-4,-4}
// {0,-1,1,-2,2,-3,3,-4,4,-5,5}
// 47
// 
// Returns: 31
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
