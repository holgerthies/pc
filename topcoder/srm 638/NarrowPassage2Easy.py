import math,string,itertools,fractions,heapq,collections,re,array,bisect,random
from Queue import Queue

class NarrowPassage2Easy:
    def count(self, size, maxSizeSum):
    	result = 0
        for p in itertools.permutations(range(len(size))):
        	invalid = False
        	for i in range(len(size)):
        		for j in range(i+1,len(size)):
        			if size[i]+size[j] > maxSizeSum and p[i] > p[j]:
        				invalid = True
        				break;
        		if invalid: break
        	if not invalid:
        		result += 1
        return result

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str(p1))
	print(str("]"))
	obj = NarrowPassage2Easy()
	startTime = time.clock()
	answer = obj.count(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p2))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (1,2,3)
p1 = 3
p2 = 2
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (1,2,3)
p1 = 1000
p2 = 6
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (1,2,3)
p1 = 4
p2 = 3
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (1,1,1,1,1,1)
p1 = 2
p2 = 720
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = (2,4,6,1,3,5)
p1 = 8
p2 = 60
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = (1000,)
p1 = 1000
p2 = 1
all_right = (disabled or KawigiEdit_RunTest(5, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# There is a narrow passage.
# Inside the passage there are some wolves.
# You are given a tuple (integer) size that contains the sizes of those wolves, from left to right.
# 
# 
# 
# The passage is so narrow that some pairs of wolves cannot pass by each other.
# More precisely, two adjacent wolves may swap places if and only if the sum of their sizes is maxSizeSum or less.
# Assuming that no wolves leave the passage, what is the number of different permutations of wolves in the passage?
# Note that two wolves are considered different even if they have the same size.
# 
# 
# 
# Compute and return the number of permutations of wolves that can be obtained from their initial order by swapping a pair of wolves zero or more times.
# 
# DEFINITION
# Class:NarrowPassage2Easy
# Method:count
# Parameters:tuple (integer), integer
# Returns:integer
# Method signature:def count(self, size, maxSizeSum):
# 
# 
# CONSTRAINTS
# -size will contain between 1 and 6 elements, inclusive.
# -Each element in size will be between 1 and 1,000, inclusive.
# -maxSizeSum will be between 1 and 1,000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1, 2, 3}
# 3
# 
# Returns: 2
# 
# From {1, 2, 3}, you can swap 1 and 2 to get {2, 1, 3}. But you can't get other permutations.
# 
# 1)
# {1, 2, 3}
# 1000
# 
# Returns: 6
# 
# Here you can swap any two adjacent wolves. Thus, all 3! = 6 permutations are possible.
# 
# 2)
# {1, 2, 3}
# 4
# 
# Returns: 3
# 
# You can get {1, 2, 3}, {2, 1, 3} and {2, 3, 1}.
# 
# 3)
# {1,1,1,1,1,1}
# 2
# 
# Returns: 720
# 
# All of these wolves are different, even though their sizes are the same. Thus, there are 6! different permutations possible.
# 
# 4)
# {2,4,6,1,3,5}
# 8
# 
# Returns: 60
# 
# 
# 
# 5)
# {1000}
# 1000
# 
# Returns: 1
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
