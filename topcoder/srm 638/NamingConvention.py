import math,string,itertools,fractions,heapq,collections,re,array,bisect,random
from Queue import Queue

class NamingConvention:
    def toCamelCase(self, variableName):
    	result = "";
    	upper = False
        for i in range(len(variableName)):
        	if variableName[i] == '_':
        		upper = True
        	else:
        		if upper:
        			result += variableName[i].upper()
        			upper = False
        		else:
        			result += variableName[i]
        return result

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\""))
	print(str("]"))
	obj = NamingConvention()
	startTime = time.clock()
	answer = obj.toCamelCase(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p1) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = "sum_of_two_numbers"
p1 = "sumOfTwoNumbers"
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = "variable"
p1 = "variable"
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = "t_o_p_c_o_d_e_r"
p1 = "tOPCODER"
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = "the_variable_name_can_be_very_long_like_this"
p1 = "theVariableNameCanBeVeryLongLikeThis"
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# In most programming languages variable names cannot contain spaces.
# If we want a variable name that consists of two or more words, we have to encode the spaces somehow.
# In this problem, we will look at two ways of doing so: Snake Case and Camel Case.
# When using Snake Case, we just replace each space by an underscore ('_').
# When using Camel Case, we capitalize the first letter of each word except for the first one, and then we remove all spaces.
# 
# 
# For example, suppose that we want to declare a variable called "good morning world" (quotes for clarity).
# In Snake Case, we would write this variable as "good_morning_world", while in Camel Case it would be "goodMorningWorld".
# 
# 
# You are given a string variableName.
# This string contains a valid variable name written in Snake Case.
# Return the same variable name in Camel Case.
# 
# DEFINITION
# Class:NamingConvention
# Method:toCamelCase
# Parameters:string
# Returns:string
# Method signature:def toCamelCase(self, variableName):
# 
# 
# CONSTRAINTS
# -variableName will contain between 1 and 50 characters.
# -Each character of variableName will be 'a'-'z' or '_'.
# -The first and last character of variableName will not be '_'.
# -variableName will not contain two consecutive underscores ('_').
# 
# 
# EXAMPLES
# 
# 0)
# "sum_of_two_numbers"
# 
# Returns: "sumOfTwoNumbers"
# 
# We have 4 words: "sum", "of", "two", "numbers". So the answer is "sum" + "Of" + "Two" + "Numbers".
# 
# 1)
# "variable"
# 
# Returns: "variable"
# 
# Note that if we have only 1 word, then the varaible name will remain same.
# 
# 2)
# "t_o_p_c_o_d_e_r"
# 
# Returns: "tOPCODER"
# 
# 
# 
# 3)
# "the_variable_name_can_be_very_long_like_this"
# 
# Returns: "theVariableNameCanBeVeryLongLikeThis"
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
