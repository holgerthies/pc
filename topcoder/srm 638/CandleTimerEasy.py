import math,string,itertools,fractions,heapq,collections,re,array,bisect,random
from Queue import Queue
from copy import copy, deepcopy
D=dict()
def light(burning, neighbors, length):
	time = 0
	states = set()
	while burning:
		state = tuple(burning)+tuple(length)
		if state in D:
			for s in states:
				D[s] = D[state]
			return D[state]
		states.add(state)
		minb = max(length.values())
		for (v,w) in length:
			if length[(v,w)] == 0: continue
			if v in burning and w in burning:
				minb = min(minb, float(length[(v,w)])/2)
			elif v in burning or w in burning:
				minb = min(minb, length[(v,w)])
		time += minb
		next_burning = set()
		for b in burning:
			for n in neighbors[b]:
				length[(b,n)] -= minb
				length[(n,b)] -= minb
				if length[(b,n)] == 0 and n in neighbors: next_burning.add(n)
		burning = burning | next_burning
		for i in range(len(length)):
			for j in range(i+1, len(length)+1):
				if (i,j) in length and length[(i,j)] == 0:
					if j in neighbors[i]:
						neighbors[i].remove(j)
					if i in neighbors[j]:
						neighbors[j].remove(i)
		for i in range(len(length)+1):
			if len(neighbors[i]) == 0 and i in burning:
				burning.remove(i)
	for s in states:
		D[s] = time
	return time


			




class CandleTimerEasy:
    def differentTime(self, A, B, length):
        leaves = set()
     	neighbors = collections.defaultdict(set)
     	times = set()
     	l=dict()
     	for i in range(len(A)):
     		neighbors[A[i]].add(B[i])
     		neighbors[B[i]].add(A[i])
     		l[(A[i], B[i])] = length[i]
     		l[(B[i], A[i])] = length[i]
     	for i in range(len(A)+1):
     		if len(neighbors[i]) <= 1:
     			leaves.add(i)
     	for r in range(1,len(leaves)+1):
     		for ls in itertools.combinations(leaves, r):
     			nc = deepcopy(neighbors)
     			lc = copy(l)
     			times.add(light(set(ls), nc, lc))
     	print times
     	return len(times)

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p2)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p2[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = CandleTimerEasy()
	startTime = time.clock()
	answer = obj.differentTime(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p3))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (0,1)
p1 = (1,2)
p2 = (10,1)
p3 = 2
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (0,0,0)
p1 = (1,2,3)
p2 = (1,1,1)
p3 = 2
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (0,0,0)
p1 = (1,2,3)
p2 = (1,2,3)
p3 = 4
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (0,1,1,2,3,3,2,4)
p1 = (1,2,3,4,5,6,7,8)
p2 = (5,3,2,4,6,8,7,1)
p3 = 7
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = (0,0,0,0)
p1 = (1,2,3,4)
p2 = (123,456,789,1000)
p3 = 8
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = (0,)
p1 = (1,)
p2 = (1000,)
p3 = 2
all_right = (disabled or KawigiEdit_RunTest(5, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# You have a lot of candles.
# The candles burn at a uniform rate: if you ignite a candle of length L, it will burn completely in L units of time.
# You can also ignite a candle at both ends, which makes it burn twice as fast.
# 
# 
# 
# You have arranged some candles into the shape of a tree.
# You want to use the tree to measure time.
# At the beginning, you will ingite some leaves of the tree (all at the same time).
# Then you will just wait and watch the flames spread across the entire tree.
# (Whenever a flame reaches an inner node of the tree, it spreads to all branches that meet at that node.)
# Note that you are not allowed to light new flames during the process.
# The time you will measure is the time between the moment when you lighted the fire(s) and the moment when the last part of the tree finished burning.
# 
# 
# 
# You are given a description of the tree as three tuple (integer)s: a, b, and len, with N elements each.
# The nodes of the tree are numbered 0 through N, inclusive.
# For each valid i, there is a candle between the nodes a[i] and b[i] with length len[i].
# 
# 
# 
# Compute and return the number of different times you can measure when following the above procedure.
# 
# DEFINITION
# Class:CandleTimerEasy
# Method:differentTime
# Parameters:tuple (integer), tuple (integer), tuple (integer)
# Returns:integer
# Method signature:def differentTime(self, A, B, len):
# 
# 
# CONSTRAINTS
# -A will contain between 1 and 19 elements, inclusive.
# -A, B and len will contain same number of elements.
# -Each element in A will be between 0 and |A|, inclusive.
# -Each element in B will be between 0 and |A|, inclusive.
# -Each element in len will be between 1 and 1000, inclusive.
# -A, B and len will describe a tree.
# 
# 
# EXAMPLES
# 
# 0)
# {0,1}
# {1,2}
# {10,1}
# 
# Returns: 2
# 
# This tree looks the same as a single candle of length 11. If we light it on one end, we will measure the time 11. If we light it on both ends, we will measure the time 5.5.
# 
# 1)
# {0,0,0}
# {1,2,3}
# {1,1,1}
# 
# Returns: 2
# 
# This time we have 3 ends. If we ignite all of them the time is 1, otherwise the time is 2.
# 
# 2)
# {0,0,0}
# {1,2,3}
# {1,2,3}
# 
# Returns: 4
# 
# We can get 4 different outcomes: 2.5, 3, 4, 5.
# 
# 3)
# {0,1,1,2,3,3,2,4}
# {1,2,3,4,5,6,7,8}
# {5,3,2,4,6,8,7,1}
# 
# Returns: 7
# 
# 
# 
# 4)
# {0,0,0,0}
# {1,2,3,4}
# {123,456,789,1000}
# 
# Returns: 8
# 
# 
# 
# 5)
# {0}
# {1}
# {1000}
# 
# Returns: 2
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
